@using Rays.Scenes;
@inherits LayoutComponentBase

<PageTitle>BlazorRays</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu OnNewGeometryModelSelected="GeometryModelChanged" />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://github.com/TheAIBot/Rays/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <div class="radio-button-container">
                <div class="radio-group">
                    <h3>Triangle Set Intersector</h3>
                    <InputRadioGroup @bind-Value="_triangleSetIntersectorFactoryName">
                        @foreach (var triangleSetIntersectorFactory in _triangleSetIntersectorFactories)
                        {
                            <label>
                                <InputRadio Value="@(triangleSetIntersectorFactory.DisplayName)" />
                                <text>&nbsp;</text>@triangleSetIntersectorFactory.DisplayName
                            </label>
                        }
                    </InputRadioGroup>
                </div>

                <div class="radio-group">
                    <h3>Render Mode</h3>
                    <InputRadioGroup @bind-Value="_sceneFactoryName">
                        @foreach (var sceneFactory in _sceneFactories)
                        {
                            <label>
                                <InputRadio Value="@(sceneFactory.DisplayName)" />
                                <text>&nbsp;</text>@sceneFactory.DisplayName
                            </label>
                        }
                    </InputRadioGroup>
                </div>
            </div>

            @if (_sceneSettings != null)
            {
                <BlazorRays.Pages.Index @key=_sceneSettings SceneSettings="_sceneSettings"></BlazorRays.Pages.Index>
            }
        </article>
    </main>
</div>

@code {
    private SceneSettings? _sceneSettings = null;
    private GeometryObjectModelFile? _geometryObjectModelFile = default!;

    [Inject]
    private IEnumerable<DisplayableOption<ITriangleSetIntersectorFromGeometryObject>> _triangleSetIntersectorFactories { get; set; } = default!;
    private DisplayableOption<ITriangleSetIntersectorFromGeometryObject>? _triangleSetIntersectorFactory { get; set; } = default!;
    private string _triangleSetIntersectorFactoryName 
    { 
        get
        {
            return _triangleSetIntersectorFactory?.DisplayName ?? throw new NullReferenceException();
        } 
        set
        {
            _triangleSetIntersectorFactory = _triangleSetIntersectorFactories.Single(x => x.DisplayName == value);
            if (TryCreateSceneSettings())
            {
                StateHasChanged();
            }
        }
    }

    [Inject]
    private IEnumerable<DisplayableOption<I3DSceneGeometryObjectFactory>> _sceneFactories { get; set; } = default!;
    private DisplayableOption<I3DSceneGeometryObjectFactory>? _sceneFactory { get; set; } = default!;
    private string _sceneFactoryName
    {
        get
        {
            return _sceneFactory?.DisplayName ?? throw new NullReferenceException();
        }
        set
        {
            _sceneFactory = _sceneFactories.Single(x => x.DisplayName == value);
            if (TryCreateSceneSettings())
            {
                StateHasChanged();
            }
        }
    }

    protected override Task OnParametersSetAsync()
    {
        _triangleSetIntersectorFactoryName = _triangleSetIntersectorFactories.Single(x => x.IsDefault).DisplayName;
        _sceneFactoryName = _sceneFactories.Single(x => x.IsDefault).DisplayName;

        return base.OnParametersSetAsync();
    }

    private Task GeometryModelChanged(GeometryObjectModelFile geometryObjectModelFile)
    {
        _geometryObjectModelFile = geometryObjectModelFile;
        if (TryCreateSceneSettings())
        {
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private bool TryCreateSceneSettings()
    {
        if (_geometryObjectModelFile == null ||
            _triangleSetIntersectorFactory == null ||
            _sceneFactory == null)
        {
            return false;
        }

        _sceneSettings = new SceneSettings(_geometryObjectModelFile, _triangleSetIntersectorFactory.Value, _sceneFactory.Value);
        return true;
    }
}
