@page "/"
@using Blazor.Extensions
@using Rays
@using System.Numerics
@using System.Diagnostics.CodeAnalysis
@using Rays.Polygons
@using Rays.Scenes;
@using System.Diagnostics;
@inject IJSRuntime jsRuntime
@implements IAsyncDisposable


<BECanvas Width="@(_CanvasSize.X)" Height="@(_CanvasSize.Y)" @ref="CanvasReference"></BECanvas>
<img id="image" />

@code {
    private readonly Point _CanvasSize = new Point(300, 400);
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private Task? _renderTask;

    [AllowNull]
    protected BECanvasComponent CanvasReference;
    [Inject]
    private I3DSceneFactory sceneFactory { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var canvas = await CanvasReference.CreateCanvas2DAsync();
            var drawer = new BrowserImageDrawer(_CanvasSize, jsRuntime);
            I3DScene scene = sceneFactory.Create(drawer);

            _renderTask = Task.Factory.StartNew(async () =>
            {
                var watch = new Stopwatch();
                try
                {
                    scene.Camera.Position = new Vector3(1000, 1000, 1000);
                    scene.Camera.Direction = Vector3.Normalize(-scene.Camera.Position);
                    using var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(50));
                    while (await timer.WaitForNextTickAsync(_cancellationTokenSource.Token))
                    {
                        watch.Restart();
                        await scene.RenderAsync();
                        watch.Stop();
                        Console.WriteLine($"Time: {watch.ElapsedMilliseconds:N2}");
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    throw;
                }
            }, TaskCreationOptions.LongRunning);
        }
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource.Cancel();
        if (_renderTask != null)
        {
            await _renderTask;
        }
    }
}