@page "/"
@using Blazor.Extensions
@using Rays
@using System.Numerics
@using System.Diagnostics.CodeAnalysis
@using Rays.Polygons
@using Rays.Scenes


<BECanvas Width="@((int)_CanvasSize.X)" Height="@((int)_CanvasSize.Y)" @ref="CanvasReference"></BECanvas>

@code {
    private readonly Vector2 _CanvasSize = new Vector2(300, 400);
    [AllowNull]
    protected BECanvasComponent CanvasReference;
    [Inject]
    private ISceneFactory sceneFactory { get; set; } = default!;
    [AllowNull]
    private IScene scene;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var canvas = await CanvasReference.CreateCanvas2DAsync();
            var drawer = new CanvasPolygonDrawer(canvas, _CanvasSize);
            scene = sceneFactory.Create(drawer);

            var _ = Task.Factory.StartNew(async () =>
            {
                try
                {
                    var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(50));
                    while (await timer.WaitForNextTickAsync())
                    {
                        await scene.RenderAsync();
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    throw;
                }
            });
        }
    }
}